on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - created
  workflow_dispatch:

env:
  CARGO_CMD: cargo
  RUSTFLAGS: "-Dwarnings"

name: Test, build and package
jobs:
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    - name: Extract crate information
      id: crate_metadata
      run: |
        cargo metadata --no-deps --format-version 1 | jq -r '"name=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"version=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" + .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" + .packages[0].homepage' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"msrv=" + .packages[0].rust_version' | tee -a $GITHUB_OUTPUT
    outputs:
      name: ${{ steps.crate_metadata.outputs.name }}
      version: ${{ steps.crate_metadata.outputs.version }}
      maintainer: ${{ steps.crate_metadata.outputs.maintainer }}
      homepage: ${{ steps.crate_metadata.outputs.homepage }}
      msrv: ${{ steps.crate_metadata.outputs.msrv }}

  format:
    name: Ensure 'cargo fmt' has been run
    runs-on: ubuntu-latest
    steps:
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
        toolchain: stable
    - uses: actions/checkout@v4
    - run: cargo fmt -- --check

  # Clippy pre-check would be nice but OS dependant features and libusb deps for all-features requires in matrix

  build:
    name: ${{ matrix.job.os }}-${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    needs: [format]
    strategy:
      fail-fast: false
      matrix:
        job:
          # default features for all targets
          - { os: ubuntu-24.04-arm, target: aarch64-unknown-linux-gnu, use-cross: false, feature-flags: "" }
          - { os: windows-latest, target: x86_64-pc-windows-gnu, use-cross: false, feature-flags: ""  }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: false, feature-flags: ""  }
          - { os: macos-latest, target: universal-apple-darwin, use-cross: false, feature-flags: ""  }
    outputs:
      # could use these for release job?
      # pkg-linux-aarch64: ${{ steps.package.outputs.pkg-aarch64-unknown-linux-gnu }}
      # pkg-linux-x86_64: ${{ steps.package.outputs.pkg-x86_64-unknown-linux-gnu }}
      # pkg-windows-x86_64: ${{ steps.package.outputs.pkg-x86_64-pc-windows-gnu }}
      # pkg-macos-x86_64: ${{ steps.package.outputs.pkg-universal-apple-darwin }}
      homebrew-pkg-name: ${{ steps.package.outputs.MACOS_PKG_NAME }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cargo/bin/cargo-deb
            target/
          key: ${{ matrix.job.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          toolchain: stable

      # Could remove this step if not clippy/testing --all-features as only required for non-native profiler
      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            *-linux-*) 
              sudo apt-get -y update;
              sudo apt-get -y install libudev-dev libusb-1.0-0-dev;
              # install cargo-deb if not cached
              if ! command -v cargo-deb &> /dev/null; then
                cargo install cargo-deb
              fi
              ;;
            *)
              ;;
          esac

      - name: Rustup add target
        if: matrix.job.use-cross == false
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            universal-apple-*)
              rustup target add x86_64-apple-darwin
              rustup target add aarch64-apple-darwin
              ;;
            *)
              rustup target add ${{ matrix.job.target }}
              ;;
          esac

      - name: Install cross
        shell: bash
        if: matrix.job.use-cross == true
        run: |
          echo "CARGO_CMD=cross" >> "$GITHUB_ENV"
          cargo install cross

      - name: Clippy check no warnings
        id: clippy
        shell: bash
        # cross targets should be covered
        if: matrix.job.use-cross == false
        run: cargo clippy --all-targets --all-features

      - name: Test
        id: test
        shell: bash
        # cross is buggy with QEMU and slow
        if: matrix.job.use-cross == false
        run: make test
        env:
          CARGO_FLAGS: ${{ matrix.job.feature-flags }}
          TARGET: ${{ matrix.job.target }}

      - name: Generated files up to date
        id: generate
        shell: bash
        if: matrix.job.use-cross == false
        run: |
          make generated
          git diff --exit-code
        env:
          CARGO_FLAGS: ${{ matrix.job.feature-flags }}
          TARGET: ${{ matrix.job.target }}

      - name: Build release
        id: build
        shell: bash
        run: echo "bin-${TARGET}=$(make release | tail -n1)" >> "$GITHUB_OUTPUT"
        env:
          CARGO_FLAGS: ${{ matrix.job.feature-flags }}
          TARGET: ${{ matrix.job.target }}

      - name: Create tarball
        id: package
        shell: bash
        run: |
          PKG_PATH="$(make package | tail -n1)"
          echo "pkg-${TARGET}=${PKG_PATH}" >> "$GITHUB_OUTPUT"
          echo "PKG_NAME=$(basename ${PKG_PATH})" >> "$GITHUB_OUTPUT"
          echo "PKG_PATH=${PKG_PATH}" >> "$GITHUB_OUTPUT"
          if [[ "${TARGET}" == *"apple"* ]]; then
            echo "MACOS_PKG_NAME=$(basename ${PKG_PATH})" >> "$GITHUB_OUTPUT"
          fi
        env:
          CARGO_FLAGS: ${{ matrix.job.feature-flags }}
          TARGET: ${{ matrix.job.target }}

      - name: Create Debian package
        id: debian-package
        shell: bash
        if: contains(matrix.job.target, 'linux')
        run: |
          DPKG_PATH="$(make dpkg | tail -n1)"
          # replace _ with -
          DPKG_NAME="$(sed 's/_/-/g' <<< $(basename ${DPKG_PATH}))"
          mv "${DPKG_PATH}" "$(dirname ${DPKG_PATH})/${DPKG_NAME}"
          DPKG_PATH="$(dirname ${DPKG_PATH})/${DPKG_NAME}"
          echo "dpkg-${TARGET}=${DPKG_PATH}" >> "$GITHUB_OUTPUT"
          echo "DPKG_NAME=$(basename ${DPKG_PATH})" >> "$GITHUB_OUTPUT"
          echo "DPKG_PATH=${DPKG_PATH}" >> "$GITHUB_OUTPUT"
        env:
          CARGO_FLAGS: ${{ matrix.job.feature-flags }}
          TARGET: ${{ matrix.job.target }}

      - name: Upload package artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.package.outputs.PKG_NAME }}
          path: ${{ steps.package.outputs.PKG_PATH }}

      - name: Upload dpkg artifact
        uses: actions/upload-artifact@master
        if: steps.debian-package.outputs.DPKG_NAME
        with:
          name: ${{ steps.debian-package.outputs.DPKG_NAME }}
          path: ${{ steps.debian-package.outputs.DPKG_PATH }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, crate_metadata]
    if: github.event_name == 'release'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/*.deb
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump Homebrew formula
        uses: mislav/bump-homebrew-formula-action@v3
        with:
          formula-name: cyme
          formula-path: Formula/cyme.rb
          homebrew-tap: tuna-f1sh/homebrew-taps
          download-url: https://github.com/tuna-f1sh/cyme/releases/download/v${{ needs.crate_metadata.outputs.version }}/${{ needs.build.outputs.homebrew-pkg-name }}
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
